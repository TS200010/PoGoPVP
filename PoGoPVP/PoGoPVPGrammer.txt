<PoGoPVPTrainer> 		::= 	<PoGoPVPTrainerItemListOpt><PoGoPVPTrainerItemListOpt>	::=	ENTRY [id] <EncyclopediaEntry> END PoGoPVPTrainerItemListOpt>          COURSE [id] <CourseEntry> END <PoGoPVPTrainerItemListOpt> 			         END 								<EncyclopediaEntry> 		::= 	FOR-COURSE [string] <KnowledgeItem> <TestItem> <HintItemOpt> <KnowledgeItem>			::= 	TYPE-IMAGE-COLOR ( Type: [string], Image: [string], Color: [string]) {SemTypeImageColor}    		{semTestAtRuleStart} TYPE-EFFECTIVENESS-ATTACK ( Attack: [string] , Defense: [string] ,         Effectiveness: [string]) {SemTypeEffectAttack}         TYPE-EFFECTIVENESS-DEFENSE ( Attack: [string] , Defense: [string] ,          Effectiveness: [string]) {SemTypeEffectDefense}         <TestItem>			::=	TEXT ( Question: [string] , AnswerType: <AnswerType> , Answer: [string] ) {SemTestText}         IMAGE ( Question: [string] , Image: [string] , AnswerType: <AnswerType> ,          Answer: [string] ) {SemTestImage}ANIMATION ( Question: [string] , Support: [string],          AnswerType: <AnswerType>,  Answer: [string] ) {SemTestAnimation}         VIDEO ( Question: [string] , Video: [string] , AnswerType: <AnswerType> ,          Answer: [string] ) {SemTestVideo}         # The Support above is an image, animation, video or URL in XCAssets         <HintItemOpt>			::=	HINT ( Hint )					<empty> # ie we just continue parsing if HINT keyword not found<Hint>				::=	Text: [string] {SemHintText}					Image: [string] {SemHintImage}					Animation: [string], [string]{SemHintAnimation}					Video: [string] {SemHintVideo}					Web-Address: [string] {SemHintWebAddress} <AnswerType>			::=	YESNO {SemAnswerYesNo}         MULTICHOICE-FIXED	( [string] , [string], [string], [string],          [string], [string] ) {}           # Show possible answers randomly out of those suppled here         MULTICHOICE-RELATED {}           # Show four possible answers randomly out of six of the most           #  recent questions of the same type         <CourseEntry>			::= 	NAME [string] {}					DESCRIPTION [string] {}					BACKGROUND [string] {}					BADGE [string] {}END-OF-GRAMMER# The grammer is defined by anything in <>, [], {} and ::=,  =::<TerminalSymbols>		::=	# Add list here (Regexs for each)<NonTerminalSymbols>		::=	[string] | [number] | [id][string]			::= 	# any characters except … tbd (Regex)[number]			::=	# any integer (Regex)[id]				::=	# [string] without spaces starting with a digit and restricted special characters (Regex)